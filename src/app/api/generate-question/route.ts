import { NextResponse } from 'next/server';

interface TestCase {
  input: string | object;
  output: string | object;
}

interface ParsedQuestion {
  title: string;
  description: string;
  function_signature: string;
  test_cases: TestCase[];
}

export async function POST(request: Request) {
  try {
    const { difficulty } = await request.json();

    if (!difficulty) {
      return NextResponse.json({ error: 'Difficulty field is missing' }, { status: 400 });
    }

    const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

    if (!OPENROUTER_API_KEY) {
      return NextResponse.json({ error: 'OPENROUTER_API_KEY is not set' }, { status: 500 });
    }

    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'deepseek/deepseek-chat-v3-0324:free',
        messages: [
          { role: 'system', content: 'You are a helpful assistant that generates Leetcode-esque Python programming questions. The output must be a JSON object with the following structure: {"title": "string", "description": "string", "function_signature": "string", "test_cases": [{"input": "string", "output": "string"}]}. Ensure the JSON is valid and complete.' },
          { role: 'user', content: `Generate a ${difficulty} difficulty Leetcode-esque question in Python. Provide the question in the specified JSON format.` },
        ],
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('OpenRouter API error:', errorData);
      return NextResponse.json({ error: 'Failed to generate question from OpenRouter API', details: errorData }, { status: response.status });
    }

    const data = await response.json();
    const generatedQuestionContent = data.choices[0]?.message?.content;

    if (!generatedQuestionContent) {
      return NextResponse.json({ error: 'No question generated by the API' }, { status: 500 });
    }

    let parsedQuestion;
    let cleanedQuestionContent = generatedQuestionContent;

    // Check if the content is wrapped in a JSON code block and remove delimiters
    const jsonCodeBlockRegex = /```json\s*([\s\S]*?)\s*```/;
    const match = generatedQuestionContent.match(jsonCodeBlockRegex);

    if (match && match[1]) {
      cleanedQuestionContent = match[1];
    }

    try {
      parsedQuestion = JSON.parse(cleanedQuestionContent) as ParsedQuestion;
    } catch (parseError: unknown) {
      console.error('Error parsing generated question JSON:', parseError);
      let errorMessage = 'Unknown parsing error';
      if (parseError instanceof Error) {
        errorMessage = parseError.message;
      }
      return NextResponse.json({ error: 'Failed to parse generated question JSON', details: errorMessage }, { status: 500 });
    }

    const { title, description, function_signature, test_cases } = parsedQuestion;

    let formattedTestCases = '';
    if (test_cases && test_cases.length > 0) {
      const isJsonLike = (val: string | object): val is string => {
        if (typeof val !== 'string') return false;
        return val.trim().startsWith('[') || val.trim().startsWith('{');
      };

      formattedTestCases = test_cases.map((tc: TestCase) => {
        const input = isJsonLike(tc.input) ? tc.input : JSON.stringify(tc.input);
        const output = isJsonLike(tc.output) ? tc.output : JSON.stringify(tc.output);

        return `\`\`\`python\nInput: ${input}\nOutput: ${output}\n\`\`\``;
      }).join('\n\n');
    }

    const formattedQuestion = `
## ${title}
 
### Description
${description}
 
### Function Signature
\`\`\`python
${function_signature}
\`\`\`
 
### Test Cases
${formattedTestCases || 'No test cases provided.'}
    `.trim();

    return NextResponse.json({ question: formattedQuestion }, { status: 200 });
  } catch (error) {
    console.error('Error in generate-question API route:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}